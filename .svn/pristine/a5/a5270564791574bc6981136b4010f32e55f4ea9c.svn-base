package edu.wm.cs.cs301.slidingpuzzle;

public class SimplePuzzleState implements PuzzleState {
	private PuzzleState state1 ;
	private int[] state2;
	private Operation operation;
	private int dist;
	@Override
 
	public void setState(int[] gameState) {
		/**
		 * Get the current puzzle state in a single dimensional array (i.e. {0,1,3,2} for 2x2 puzzle). 
		 * Blank tile is represented as 0. The coding goes by rows, for the example the top row 
		 * contains values 0 and 1 from left to right. This method is symmetric to setState and
		 * returns an array of same content that was assigned with the setState method.
		 * @return Single dimensional array of integer representing puzzle state
		 */

		// TODO Auto-generated method stub

		 state2 = gameState;
		
		
	}

	@Override
	public int[] getState() {
	
		// TODO Auto-generated method stub
		return state2;
	}

	@Override
	public PuzzleState getParent() {
		// TODO Auto-generated method stub
		
		return state1;
	}

	@Override
	public void setParent(PuzzleState parentState) {
		// TODO Auto-generated method stub
		state1=parentState;

	}

	@Override
	public void setOperation(Operation op) {
		// TODO Auto-generated method stub
		operation = op;
	}

	@Override
	public Operation getOperation() {
		// TODO Auto-generated method stub
		return operation;
	}

	@Override
	public void setDistance(int distance) {
		// TODO Auto-generated method stub
		dist = distance;
		dist = dist +1;
			
	}

	@Override
	public int getDistance() {
		// TODO Auto-generated method stub
		return dist;
	}

	@Override
	public boolean equals(PuzzleState other) {
		// TODO Auto-generated method stub, make for loop and check each item for content
		return other.getState()==state2;
	}
	/**
	 * Returns a new instance of PuzzleState where the gap and the value above it are switched.
	 * The returned PuzzleState is a newly created object where state, parent and operation
	 * attributes are properly set. The parent is this object, the operation is MOVEUP.
	 * @return new PuzzleState for legal move. For illegal move operation it return null.
	 */
	@Override
	public PuzzleState moveUp() {
		// TODO Auto-generated method stub
		int boardSize = (int) Math.sqrt(state2.length);
		for (int i = 0; i < state2.length-1; i++) {
		    if (state2[i] == 0) {
		    	 if (i <boardSize-1){
		    		 return null;
		    	 }
		    	 else{
		    		 int[] state3 = state2.clone();
		    		 state3[i]=state3[i-boardSize] ;
		    		 state3[i-boardSize] = 0;
		    		 PuzzleState NewState = new SimplePuzzleState();
		    		 NewState.setState(state3);
		    		 PuzzleState ThisState = this;	  
		    		 NewState.setParent(ThisState);
		    		 //Know the child node has the parents distance+1 (use set operation)
		    		 NewState.setOperation(Operation.MOVEUP);
		    		 return NewState;
		    		 }
		    	 }
		    }
		return null;
		}
	

	@Override
	public PuzzleState moveDown() {
		// TODO Auto-generated method stub
		int boardSize = (int) Math.sqrt(state2.length);
		for (int i = 0; i >  state2.length-1-boardSize; i++) {
		    if (state2[i] == 0) {
		    	 if (i <boardSize-1){
		    		 return null;
		    	 }
		    	 else{
		    		 int[] state3 = state2.clone();
		    		 state3[i]=state3[i+boardSize] ;
		    		 state3[i+boardSize] = 0;
		    		 PuzzleState NewState = new SimplePuzzleState();
		    		 NewState.setState(state3);
		    		 PuzzleState ThisState = this;	  
		    		 NewState.setParent(ThisState);
		    		 NewState.setOperation(Operation.MOVEDOWN);
		    		 return NewState;
		    		 }
		    	 }
		    }
		return null;
		}
		
	

	@Override
	public PuzzleState moveLeft() {
		// TODO Auto-generated method stub
		int boardSize = (int) Math.sqrt(state2.length);
		for (int i = 0; i >  state2.length-1-boardSize; i++) {
		    if (state2[i] == 0) {
		    	 if (i % boardSize==0){
		    		 return null;
		    	 }
		    	 else{
		    		 int[] state3 = state2.clone();
		    		 state3[i]=state3[i-1] ;
		    		 state3[i-1] = 0;
		    		 PuzzleState NewState = new SimplePuzzleState();
		    		 NewState.setState(state3);
		    		 PuzzleState ThisState = this;	  
		    		 NewState.setParent(ThisState);
		    		 NewState.setOperation(Operation.MOVELEFT);
		    		 return NewState;
		    		 }
		    	 }
		    }
		return null;
		}
		

	@Override
	public PuzzleState moveRight() {
		// TODO Auto-generated method stub, check corner pieces
		int boardSize = (int) Math.sqrt(state2.length);
		for (int i = 0; i >  state2.length-1-boardSize; i++) {
		    if (state2[i] == 0) {
		    	 if ((i-1) % boardSize==0){
		    		 return null;
		    	 }
		    	 else{
		    		 int[] state3 = state2.clone();
		    		 state3[i]=state3[i+1] ;
		    		 state3[i+1] = 0;
		    		 PuzzleState NewState = new SimplePuzzleState();
		    		 NewState.setState(state3);
		    		 PuzzleState ThisState = this;	  
		    		 NewState.setParent(ThisState);
		    		 NewState.setOperation(Operation.MOVERIGHT);
		    		 return NewState;
		    		 }
		    	 }
		    }
		return null;
		}

}
